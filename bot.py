import logging
import telebot
import requests
from keyboard import menu, helpkey, token_small
from secret import TOKEN, folder_id
from config import (MAX_GPT_TOKENS, MAX_USER_GPT_TOKENS, MAX_USERS, LOGS, IAM_TOKEN_PATH, TOKENIZE_URL,
                    GPT_MODEL, GPT_URL)
from database import Database
import csv

IAM_TOKEN = 't1.9euelZqencyXy5mLm4mblpXLms2Mxu3rnpWakZOMy8uYk4nJnZPIjovLiZHl8_dQK0JN-e9AMmx1_t3z9xBaP03570AybHX-zef1656VmpnKzp6VioqbnJeVk8qKypSO7_zF656VmpnKzp6VioqbnJeVk8qKypSOveuelZrMkY6Jx8mXx5vOlpiansablrXehpzRnJCSj4qLmtGLmdKckJKPioua0pKai56bnoue0oye.6BLtq5EqCiB5BT0FqIbSDhdBxyo9O8t_izA3_1KPQoroFT0c0R0DXYivpoEI6pftn1LFDMS8QbDOlFTvw4LQBw'

db = Database()

bot = telebot.TeleBot(TOKEN)

logging.basicConfig(filename=LOGS, level=logging.DEBUG,
                    format="%(asctime)s FILE: %(filename)s IN: %(funcName)s MESSAGE: %(message)s", filemode="w")

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    logging.info(f"{user_name} | {chat_id} - –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    db.add_user(chat_id)
    bot.send_message(chat_id,
                     f"<b>–ü—Ä–∏–≤–µ—Ç {user_name}üëã, —ç—Ç–æ –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö.</b>\n\n"
                     f"–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å /help.\n"
                     f"–ê –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –ø–æ –≤–∞—à–µ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ /set_town –∏ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.\n",
                     parse_mode='html',reply_markup=menu)

@bot.message_handler(commands=['help'])
def help(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    logging.info(f"{user_name} | {chat_id} - –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É help")
    bot.send_message(chat_id,
                     f"–î–∞–Ω–Ω—ã–π –±–æ—Ç ü§ñ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ <b>YaGPT</b>.\n\n"
                     f"/support_of_—Åreators - –∫–æ–º–∞–Ω–¥–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö –±–æ—Ç–∞.\n"
                     f"/travel_help - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –≥–æ—Ä–æ–¥–∞.\n"
                     f"/town_history - —É–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≥–æ—Ä–æ–¥–∞\n"
                     f"/set_town - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º –≥–æ—Ä–æ–¥–∞, –±–µ–∑ –Ω–µ—ë –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                     f"/get_weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ\n"
                     f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ - {MAX_USERS}\n"
                     f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {MAX_USER_GPT_TOKENS}\n"
                     f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ GPT - {MAX_GPT_TOKENS}\n",
                     parse_mode='html',reply_markup=helpkey)

@bot.message_handler(commands=['support_of_—Åreators'])
def support_of_—Åreators(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    logging.info(f"{user_name} | {chat_id} - –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É support_of_—Åreators")
    bot.send_message(chat_id,
                     f"<b>–≠—Ç–∏ –ª—é–¥–∏üßëüèº‚Äçüíª —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ –±–æ—Ç–æ–º, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º—É-—Ç–æ –∏–∑ –Ω–∏—Ö:</b>\n\n"
                     f"üë®‚Äçüéì<b>–ú–∞—Ä–∫</b>\n"
                     f"Discord - <code>lathanael.</code>\n"
                     f"Telegram - ???\n"
                     f"üë®‚Äçüéì<b>–ê–ª–µ–∫—Å–µ–π</b>\n"
                     f"Discord - <code>noverega10</code>\n"
                     f"Telegram - ???\n"
                     f"ü•∑<b>–õ–µ–æ–Ω–∏–¥</b>\n"
                     f"Discord - <code>fallan.</code>\n"
                     f"Telegram - <code>@fallangg</code>\n",
                     parse_mode='html',reply_markup=menu)

@bot.message_handler(commands=['set_town'])
def get_town(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    logging.info(f"{user_name} | {chat_id} - –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É set_town")

    bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏ <b>–≥–æ—Ä–æ–¥</b>, –æ –∫–æ—Ç–æ—Ä–æ–º –º—ã –±—É–¥–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º..',
                     parse_mode='html',reply_markup=menu)
    bot.register_next_step_handler(message, check_town_in_csv)

def check_town_in_csv(message):
    with open('city.csv', newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        town = message.text
        for row in reader:
            if row["name"] == town:
                return True
    return False

def handle_message(message):
    town = message.text
    chat_id = message.from_user.id
    csv_file = 'city.csv'

    if check_town_in_csv(town, csv_file):
        bot.send_message(chat_id, '<b>–ù—É–∂–Ω—ã–π –≤–∞–º –≥–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!</b>üòÉ\n–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º.',
                     parse_mode='html',reply_markup=menu)
        db.update_city(town, chat_id)
    else:
        bot.send_message(chat_id, "<b>–ù—É–∂–Ω—ã–π –≤–∞–º –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!</b>üò•\n"
                                  "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /travel_help –∏ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∑–∞–Ω–æ–≤–æ.",
                     parse_mode='html',reply_markup=menu)
        

@bot.message_handler(commands=['travel_help'])
def get_weather(message):
    chat_id = message.chat.id
    city = db.get_city(chat_id)
    if city == None:
        bot.send_message(chat_id, "<b>–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ /set_town!</b>üò•\n",
                     parse_mode='html',reply_markup=menu)
        return
    PROMPT = [{'role': 'system', 'text': f'–†–∞—Å—Å–∫–∞–∂–∏ –æ –≥–ª–∞–≤–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º '}]
    user_tokens = db.get_tokens(chat_id)
    if user_tokens < 120:
        bot.send_message(chat_id, "<b>–£ –≤–∞—Å –Ω–µ—Ç—É —Ç–æ–∫–µ–Ω–æ–≤.</b>üò•\n"
                                  "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã: /help, /get_weather –∏ /support_of_—Åreators",
                     parse_mode='html',reply_markup=token_small)
        return
    success, otvet, tokens_in_answer = ask_gpt(city, PROMPT)
    if success:
        bot.send_message(chat_id, f"<b>{otvet}</b>",
                         parse_mode='html',reply_markup=menu)
        db.update_tokens(tokens_in_answer, chat_id)

def count_gpt_tokens(messages):
    headers = {
        'Authorization': f'Bearer {IAM_TOKEN}',
        'Content-Type': 'application/json'
    }
    data = {
        'modelUri': f"gpt://{folder_id}/yandexgpt-lite",
        "messages": messages
    }
    try:
        response = requests.post(url=TOKENIZE_URL, json=data, headers=headers).json()['tokens']
        return len(response)
    except Exception as e:
        logging.error(e)
        return 0


def ask_gpt(messages, SYSTEM_PROMPT):
    headers = {
        'Authorization': f'Bearer {IAM_TOKEN}',
        'Content-Type': 'application/json'
    }
    data = {
        'modelUri': f"gpt://{folder_id}/{GPT_MODEL}",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 100
        },
        "messages": SYSTEM_PROMPT + messages
    }
    try:
        response = requests.post(GPT_URL, headers=headers, json=data)
        if response.status_code != 200:
            return False, f"–û—à–∏–±–∫–∞ GPT. –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}", None
        answer = response.json()['result']['alternatives'][0]['message']['text']
        tokens_in_answer = count_gpt_tokens([{'role': 'assistant', 'text': answer}])
        return True, answer, tokens_in_answer
    except Exception as e:
        logging.error(e)
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT",  None



bot.polling()