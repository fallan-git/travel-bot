import logging
import telebot
import requests
from keyboard import menu, helpkey
from secret import TOKEN, folder_id
from config import (MAX_GPT_TOKENS, MAX_USER_GPT_TOKENS, MAX_USERS, LOGS, IAM_TOKEN_PATH, TOKENIZE_URL,
                    GPT_MODEL, GPT_URL)
from database import Database
import csv

IAM_TOKEN = ''

try:
    with open(IAM_TOKEN_PATH, 'r') as file:
        IAM_TOKEN = file.read()
except FileNotFoundError:
    logging.info(f"–§–∞–π–ª c IAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")
except Exception as e:
    logging.info(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")



db = Database()
db.create_database()

bot = telebot.TeleBot(TOKEN)

logging.basicConfig(filename=LOGS, level=logging.DEBUG,
                    format="%(asctime)s FILE: %(filename)s IN: %(funcName)s MESSAGE: %(message)s", filemode="w")

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    logging.info(f"{user_name} | {chat_id} - –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    db.add_user(chat_id)
    bot.send_message(chat_id,
                     f"<b>–ü—Ä–∏–≤–µ—Ç {user_name}üëã, —ç—Ç–æ –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö.</b>\n\n"
                     f"–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å /help.\n"
                     f"–ê –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –ø–æ –≤–∞—à–µ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ /travel_help.\n",
                     parse_mode='html',reply_markup=menu)

@bot.message_handler(commands=['help'])
def help(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    logging.info(f"{user_name} | {chat_id} - –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É help")
    bot.send_message(chat_id,
                     f"–î–∞–Ω–Ω—ã–π –±–æ—Ç ü§ñ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ <b>YaGPT</b>.\n\n"
                     f"/support_of_—Åreators - –∫–æ–º–∞–Ω–¥–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö –±–æ—Ç–∞.\n"
                     f"/travel_help - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –≥–æ—Ä–æ–¥–∞ –∏ –æ —Ç–æ–º –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è –æ–¥–µ—Ç—å—Å—è.\n"
                     f"/town_history - —É–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≥–æ—Ä–æ–¥–∞\n\n"
                     f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ - {MAX_USERS}\n"
                     f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {MAX_USER_GPT_TOKENS}\n"
                     f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ GPT - {MAX_GPT_TOKENS}\n",
                     parse_mode='html',reply_markup=helpkey)

@bot.message_handler(commands=['support_of_—Åreators'])
def support_of_—Åreators(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    logging.info(f"{user_name} | {chat_id} - –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É support_of_—Åreators")
    bot.send_message(chat_id,
                     f"<b>–≠—Ç–∏ –ª—é–¥–∏üßëüèº‚Äçüíª —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ –±–æ—Ç–æ–º, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º—É-—Ç–æ –∏–∑ –Ω–∏—Ö:</b>\n\n"
                     f"üë®‚Äçüéì<b>–ú–∞—Ä–∫</b>\n"
                     f"Discord - <code>lathanael.</code>\n"
                     f"Telegram - ???\n"
                     f"üë®‚Äçüéì<b>–ê–ª–µ–∫—Å–µ–π</b>\n"
                     f"Discord - <code>noverega10</code>\n"
                     f"Telegram - ???\n"
                     f"ü•∑<b>–õ–µ–æ–Ω–∏–¥</b>\n"
                     f"Discord - <code>fallan.</code>\n"
                     f"Telegram - <code>@fallangg</code>\n",
                     parse_mode='html',reply_markup=menu)

@bot.message_handler(commands=['travel_help'])
def get_town(message):
    chat_id = message.from_user.id
    user_name = message.from_user.first_name
    logging.info(f"{user_name} | {chat_id} - –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É travel_help")

    bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏ <b>–≥–æ—Ä–æ–¥</b>, –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö üèõ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å.',
                     parse_mode='html',reply_markup=menu)
    bot.register_next_step_handler(message, check_town_in_csv)

def check_town_in_csv(message):
    with open('city.csv', newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        town = message.text
        for row in reader:
            if row["name"] == town:
                return True
    return False

def handle_message(message):
    town = message.text
    chat_id = message.from_user.id
    csv_file = 'city.csv'

    if check_town_in_csv(town, csv_file):
        bot.send_message(chat_id, '<b>–ù—É–∂–Ω—ã–π –≤–∞–º –≥–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!</b>üòÉ\n–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º.',
                     parse_mode='html',reply_markup=menu)
        db.update_city(town, chat_id)
    else:
        bot.send_message(chat_id, "<b>–ù—É–∂–Ω—ã–π –≤–∞–º –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!</b>üò•\n"
                                  "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /travel_help –∏ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∑–∞–Ω–æ–≤–æ.",
                     parse_mode='html',reply_markup=menu)
        
        
@bot.message_handler(commands=['get_weather'])
def get_weather(message):
    chat_id = message.from_user.id
    PROMPT = [{'role': 'system', 'text': f'–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º '}]
    city = db.get_city(chat_id)
    if
    otvet = ask_gpt(city, PROMPT)
    bot.send_message(chat_id, f"<b>{otvet}</b>",
                     parse_mode='html',reply_markup=menu)

def count_gpt_tokens(messages):
    headers = {
        'Authorization': f'Bearer {IAM_TOKEN}',
        'Content-Type': 'application/json'
    }
    data = {
        'modelUri': f"gpt://{folder_id}/yandexgpt-lite",
        "messages": messages
    }
    try:
        response = requests.post(url=TOKENIZE_URL, json=data, headers=headers).json()['tokens']
        return len(response)
    except Exception as e:
        logging.error(e)
        return 0


def ask_gpt(messages, SYSTEM_PROMPT):
    headers = {
        'Authorization': f'Bearer {IAM_TOKEN}',
        'Content-Type': 'application/json'
    }
    data = {
        'modelUri': f"gpt://{folder_id}/{GPT_MODEL}",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 100
        },
        "messages": SYSTEM_PROMPT + messages
    }
    try:
        response = requests.post(GPT_URL, headers=headers, json=data)
        if response.status_code != 200:
            return False, f"–û—à–∏–±–∫–∞ GPT. –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}", None
        answer = response.json()['result']['alternatives'][0]['message']['text']
        tokens_in_answer = count_gpt_tokens([{'role': 'assistant', 'text': answer}])
        return True, answer, tokens_in_answer
    except Exception as e:
        logging.error(e)
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT",  None



bot.polling()
